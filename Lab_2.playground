import UIKit
/*
//Exersise Functions
//1

func minValue(a:Int,b:Int)->Int{
    if(a>b){
        return b
    }else{
        return a
    }
}
print("Less number is \(minValue(a: 2, b: 3))!")

//2

func lastDigit(a:Int)->Int{
    let ans = a%10
    return ans
}

print("Last digit of 201267 is \(lastDigit(a: 201267))")

//3
func divides(a:Int,b:Int)->Bool{
    if(a%b==0){
        return true
    }else{
        return false
    }
}
func countDivisors(a:Int)->Int{
    var counter = 0
    for i in 1...a{
        if(a%i==0){
            counter+=1
        }
    }
    return counter
}

func isPrime(a:Int)->Bool{
    if(countDivisors(a: a)>2){
        return false
    }else{
        return true
    }
}
divides(a:7, b:3)
divides(a:8, b:4)
countDivisors(a:1)
countDivisors(a:10)
countDivisors(a:12)
isPrime(a:3)
isPrime(a:8)
isPrime(a:13)
*/
/*
//Exersise Closures
//1
func smartBart(n:Int,closure:()->Void){
    for _ in 0..<n{
        closure()
    }
}
let closure = {
    print("I will pass this course with best mark, because Swift is great!")
}
smartBart(n: 5, closure: closure)
//2
let numbers = [10, 16, 18, 30, 38, 40, 44, 50]
let numbersFiltered = numbers.filter{$0 % 4 == 0}
print(numbersFiltered)
//3
if let largestNumber = numbers.reduce(numbers.first) { (currentMax, next) in
    return max(currentMax ?? next, next)
} {
    print("The largest number is: \(largestNumber)")
}
//4
var strings = ["Gdansk", "University", "of", "Technology"]
let joinedString = strings.reduce("") { $0.isEmpty ? $1 : $0 + " " + $1 }
print(joinedString)
//5
let numbers = [1, 2, 3, 4, 5, 6]

let sumOfSquaresOfOddNumbers = numbers
    .filter { $0 % 2 != 0 }
    .map { $0 * $0 }
    .reduce(0, +)

let formattedOutput = numbers
    .filter { $0 % 2 != 0 }
    .map { "\($0 * $0)" }
    .joined(separator: " + ")

print("\(formattedOutput) -> \(sumOfSquaresOfOddNumbers)")
*/
//Exersise Tuples
//1
/*
func minmax(a: Int, b: Int) -> (String, Int, String, Int) {
    let minmaxValue: (String, Int, String, Int)
    if a < b {
        minmaxValue = ("min", a, "max", b)
    } else {
        minmaxValue = ("min", b, "max", a)
    }
    return minmaxValue
}

// Example usage
let result = minmax(a: 10, b: 5)
print(result)
//2
var stringsArray = ["gdansk", "university", "gdansk", "university", "university", "of", "technology", "technology", "gdansk", "gdansk"]

// Create a dictionary to count occurrences of each string
var countedStringsDict = [String: Int]()

for string in stringsArray {
    countedStringsDict[string, default: 0] += 1
}

// Convert the dictionary into an array of tuples
let countedStrings = countedStringsDict.map { ($0.key, $0.value) }

print(countedStrings)
*/
//Exersise Enums
enum Day: Int {
    case monday = 1
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
    
    func emoji() -> String {
        switch self {
        case .monday:
            return "🌞"
        case .tuesday:
            return "🌮"
        case .wednesday:
            return "🐪"
        case .thursday:
            return "🌳"
        case .friday:
            return "🎉"
        case .saturday:
            return "🥳"
        case .sunday:
            return "☀️"
        }
    }
}

// Example usage
let today = Day.tuesday
print("Today is \(today.emoji())")


